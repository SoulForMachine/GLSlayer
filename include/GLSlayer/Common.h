
#ifndef _GLSLAYER_COMMON_H_
#define _GLSLAYER_COMMON_H_

#include <cstdint>
#include <cstddef>

#if defined(_WIN32)

#ifdef GLSLAYER_EXPORTS
#define GLSLAYER_API	__declspec(dllexport)
#else
#define GLSLAYER_API	__declspec(dllimport)
#endif

#elif defined(__linux__)

#ifdef GLSLAYER_EXPORTS
#define GLSLAYER_API	__attribute__((visibility("default")))
#else
#define GLSLAYER_API
#endif

#endif


namespace gls
{

	enum ResourceType
	{
		RES_BUFFER,
		RES_SHADER,
		RES_TEXTURE,
		RES_FRAMEBUFFER,
		RES_RENDERBUFFER,
		RES_TRANSFORM_FEEDBACK,
		RES_SAMPLER_STATE,
	};

	enum BufferType
	{
		VERTEX_BUFFER,
		INDEX_BUFFER,
		PIXEL_PACK_BUFFER,
		PIXEL_UNPACK_BUFFER,
		TEXTURE_BUFFER,
		UNIFORM_BUFFER,
		TRANSFORM_FEEDBACK_BUFFER,
		DRAW_INDIRECT_BUFFER,
		DISPATCH_INDIRECT_BUFFER,
		ATOMIC_COUNTER_BUFFER,
		SHADER_STORAGE_BUFFER,
		QUERY_BUFFER,
	};

	enum ShaderType
	{
		VERTEX_SHADER,
		GEOMETRY_SHADER,
		TESS_CONTROL_SHADER,
		TESS_EVALUATION_SHADER,
		FRAGMENT_SHADER,
		COMPUTE_SHADER,
	};

	enum TextureType
	{
		TEXTURE_1D,
		TEXTURE_2D,
		TEXTURE_2D_MULTISAMPLE,
		TEXTURE_3D,
		TEXTURE_CUBE,
		TEXTURE_1D_ARRAY,
		TEXTURE_2D_ARRAY,
		TEXTURE_2D_MULTISAMPLE_ARRAY,
		TEXTURE_CUBE_ARRAY,
		TEXTURE_RECTANGLE,
		TEXTURE_BUFFER_DATA,
	};

	enum QueryType
	{
		QUERY_UNDEFINED,
		QUERY_SAMPLES_PASSED,
		QUERY_ANY_SAMPLES_PASSED,
		QUERY_ANY_SAMPLES_PASSED_CONSERVATIVE,
		QUERY_PRIMITIVES_GENERATED,
		QUERY_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
		QUERY_TIME_ELAPSED,
		QUERY_TIMESTAMP,
	};

	enum DataType
	{
		TYPE_NONE,
		TYPE_UNSIGNED_BYTE,
		TYPE_BYTE,
		TYPE_UNSIGNED_SHORT,
		TYPE_SHORT,
		TYPE_UNSIGNED_INT,
		TYPE_INT,
		TYPE_INT_2_10_10_10_REV,
		TYPE_HALF_FLOAT,
		TYPE_FLOAT,
		TYPE_DOUBLE,
		TYPE_UNSIGNED_BYTE_3_3_2,
		TYPE_UNSIGNED_BYTE_2_3_2_REV,
		TYPE_UNSIGNED_SHORT_5_6_5,
		TYPE_UNSIGNED_SHORT_5_6_5_REV,
		TYPE_UNSIGNED_SHORT_4_4_4_4,
		TYPE_UNSIGNED_SHORT_4_4_4_4_REV,
		TYPE_UNSIGNED_SHORT_5_5_5_1,
		TYPE_UNSIGNED_SHORT_1_5_5_5_REV,
		TYPE_UNSIGNED_INT_8_8_8_8,
		TYPE_UNSIGNED_INT_8_8_8_8_REV,
		TYPE_UNSIGNED_INT_10_10_10_2,
		TYPE_UNSIGNED_INT_2_10_10_10_REV,
		TYPE_UNSIGNED_INT_24_8,
		TYPE_UNSIGNED_INT_10F_11F_11F_REV,
		TYPE_UNSIGNED_INT_5_9_9_9_REV,
		TYPE_FLOAT_32_UNSIGNED_INT_24_8_REV,
	};

	enum ShaderDataType
	{
		SHADER_TYPE_FLOAT,
		SHADER_TYPE_FLOAT_VEC2,
		SHADER_TYPE_FLOAT_VEC3,
		SHADER_TYPE_FLOAT_VEC4,
		SHADER_TYPE_DOUBLE,
		SHADER_TYPE_DOUBLE_VEC2,
		SHADER_TYPE_DOUBLE_VEC3,
		SHADER_TYPE_DOUBLE_VEC4,
		SHADER_TYPE_INT,
		SHADER_TYPE_INT_VEC2,
		SHADER_TYPE_INT_VEC3,
		SHADER_TYPE_INT_VEC4,
		SHADER_TYPE_UNSIGNED_INT,
		SHADER_TYPE_UNSIGNED_INT_VEC2,
		SHADER_TYPE_UNSIGNED_INT_VEC3,
		SHADER_TYPE_UNSIGNED_INT_VEC4,
		SHADER_TYPE_BOOL,
		SHADER_TYPE_BOOL_VEC2,
		SHADER_TYPE_BOOL_VEC3,
		SHADER_TYPE_BOOL_VEC4,
		SHADER_TYPE_FLOAT_MAT2,
		SHADER_TYPE_FLOAT_MAT3,
		SHADER_TYPE_FLOAT_MAT4,
		SHADER_TYPE_FLOAT_MAT2x3,
		SHADER_TYPE_FLOAT_MAT2x4,
		SHADER_TYPE_FLOAT_MAT3x2,
		SHADER_TYPE_FLOAT_MAT3x4,
		SHADER_TYPE_FLOAT_MAT4x2,
		SHADER_TYPE_FLOAT_MAT4x3,
		SHADER_TYPE_DOUBLE_MAT2,
		SHADER_TYPE_DOUBLE_MAT3,
		SHADER_TYPE_DOUBLE_MAT4,
		SHADER_TYPE_DOUBLE_MAT2x3,
		SHADER_TYPE_DOUBLE_MAT2x4,
		SHADER_TYPE_DOUBLE_MAT3x2,
		SHADER_TYPE_DOUBLE_MAT3x4,
		SHADER_TYPE_DOUBLE_MAT4x2,
		SHADER_TYPE_DOUBLE_MAT4x3,
		SHADER_TYPE_SAMPLER_1D,
		SHADER_TYPE_SAMPLER_2D,
		SHADER_TYPE_SAMPLER_3D,
		SHADER_TYPE_SAMPLER_CUBE,
		SHADER_TYPE_SAMPLER_1D_SHADOW,
		SHADER_TYPE_SAMPLER_2D_SHADOW,
		SHADER_TYPE_SAMPLER_1D_ARRAY,
		SHADER_TYPE_SAMPLER_2D_ARRAY,
		SHADER_TYPE_SAMPLER_1D_ARRAY_SHADOW,
		SHADER_TYPE_SAMPLER_2D_ARRAY_SHADOW,
		SHADER_TYPE_SAMPLER_2D_MULTISAMPLE,
		SHADER_TYPE_SAMPLER_2D_MULTISAMPLE_ARRAY,
		SHADER_TYPE_SAMPLER_CUBE_SHADOW,
		SHADER_TYPE_SAMPLER_BUFFER,
		SHADER_TYPE_SAMPLER_2D_RECT,
		SHADER_TYPE_SAMPLER_2D_RECT_SHADOW,
		SHADER_TYPE_INT_SAMPLER_1D,
		SHADER_TYPE_INT_SAMPLER_2D,
		SHADER_TYPE_INT_SAMPLER_3D,
		SHADER_TYPE_INT_SAMPLER_CUBE,
		SHADER_TYPE_INT_SAMPLER_1D_ARRAY,
		SHADER_TYPE_INT_SAMPLER_2D_ARRAY,
		SHADER_TYPE_INT_SAMPLER_2D_MULTISAMPLE,
		SHADER_TYPE_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
		SHADER_TYPE_INT_SAMPLER_BUFFER,
		SHADER_TYPE_INT_SAMPLER_2D_RECT,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_1D,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_2D,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_3D,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_CUBE,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_1D_ARRAY,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_2D_ARRAY,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_BUFFER,
		SHADER_TYPE_UNSIGNED_INT_SAMPLER_2D_RECT,
	};

	enum ImageFormat
	{
		IMAGE_FORMAT_NONE,
		IMAGE_FORMAT_DEPTH,
		IMAGE_FORMAT_DEPTH_STENCIL,
		IMAGE_FORMAT_STENCIL,
		IMAGE_FORMAT_RED,
		IMAGE_FORMAT_GREEN,
		IMAGE_FORMAT_BLUE,
		IMAGE_FORMAT_RG,
		IMAGE_FORMAT_RGB,
		IMAGE_FORMAT_RGBA,
		IMAGE_FORMAT_BGR,
		IMAGE_FORMAT_BGRA,
		IMAGE_FORMAT_RED_INTEGER,
		IMAGE_FORMAT_GREEN_INTEGER,
		IMAGE_FORMAT_BLUE_INTEGER,
		IMAGE_FORMAT_RG_INTEGER,
		IMAGE_FORMAT_RGB_INTEGER,
		IMAGE_FORMAT_RGBA_INTEGER,
		IMAGE_FORMAT_BGR_INTEGER,
		IMAGE_FORMAT_BGRA_INTEGER,
	};

	enum PixelFormat
	{
		PIXEL_FORMAT_NONE,

		// integer formats
		PIXEL_FORMAT_R8,
		PIXEL_FORMAT_R16,
		PIXEL_FORMAT_RG8,
		PIXEL_FORMAT_RG16,
		PIXEL_FORMAT_R3_G3_B2,
		PIXEL_FORMAT_RGB4,
		PIXEL_FORMAT_RGB5,
		PIXEL_FORMAT_RGB8,
		PIXEL_FORMAT_RGB10,
		PIXEL_FORMAT_RGB12,
		PIXEL_FORMAT_RGB16,
		PIXEL_FORMAT_RGBA2,
		PIXEL_FORMAT_RGBA4,
		PIXEL_FORMAT_RGB5_A1,
		PIXEL_FORMAT_RGBA8,
		PIXEL_FORMAT_RGB10_A2,
		PIXEL_FORMAT_RGBA12,
		PIXEL_FORMAT_RGBA16,
		PIXEL_FORMAT_SRGB8,
		PIXEL_FORMAT_SRGB8_A8,

		// signed normalized integer formats
		PIXEL_FORMAT_RED_SNORM,
		PIXEL_FORMAT_RG_SNORM,
		PIXEL_FORMAT_RGB_SNORM,
		PIXEL_FORMAT_RGBA_SNORM,
		PIXEL_FORMAT_R8_SNORM,
		PIXEL_FORMAT_RG8_SNORM,
		PIXEL_FORMAT_RGB8_SNORM,
		PIXEL_FORMAT_RGBA8_SNORM,
		PIXEL_FORMAT_R16_SNORM,
		PIXEL_FORMAT_RG16_SNORM,
		PIXEL_FORMAT_RGB16_SNORM,
		PIXEL_FORMAT_RGBA16_SNORM,

		// floating point formats
		PIXEL_FORMAT_R16F,
		PIXEL_FORMAT_RG16F,
		PIXEL_FORMAT_RGB16F,
		PIXEL_FORMAT_RGBA16F,
		PIXEL_FORMAT_R32F,
		PIXEL_FORMAT_RG32F,
		PIXEL_FORMAT_RGB32F,
		PIXEL_FORMAT_RGBA32F,
		PIXEL_FORMAT_R11F_G11F_B10F,
		PIXEL_FORMAT_RGB9_E5,

		// pure integer formats
		PIXEL_FORMAT_R8I,
		PIXEL_FORMAT_R8UI,
		PIXEL_FORMAT_R16I,
		PIXEL_FORMAT_R16UI,
		PIXEL_FORMAT_R32I,
		PIXEL_FORMAT_R32UI,
		PIXEL_FORMAT_RG8I,
		PIXEL_FORMAT_RG8UI,
		PIXEL_FORMAT_RG16I,
		PIXEL_FORMAT_RG16UI,
		PIXEL_FORMAT_RG32I,
		PIXEL_FORMAT_RG32UI,
		PIXEL_FORMAT_RGB8I,
		PIXEL_FORMAT_RGB8UI,
		PIXEL_FORMAT_RGB16I,
		PIXEL_FORMAT_RGB16UI,
		PIXEL_FORMAT_RGB32I,
		PIXEL_FORMAT_RGB32UI,
		PIXEL_FORMAT_RGBA8I,
		PIXEL_FORMAT_RGBA8UI,
		PIXEL_FORMAT_RGB10_A2UI,
		PIXEL_FORMAT_RGBA16I,
		PIXEL_FORMAT_RGBA16UI,
		PIXEL_FORMAT_RGBA32I,
		PIXEL_FORMAT_RGBA32UI,

		// depth-stencil formats
		PIXEL_FORMAT_DEPTH16,
		PIXEL_FORMAT_DEPTH24,
		PIXEL_FORMAT_DEPTH32,
		PIXEL_FORMAT_DEPTH32F,
		PIXEL_FORMAT_DEPTH24_STENCIL8,
		PIXEL_FORMAT_DEPTH32F_STENCIL8,
		PIXEL_FORMAT_STENCIL1,
		PIXEL_FORMAT_STENCIL4,
		PIXEL_FORMAT_STENCIL8,
		PIXEL_FORMAT_STENCIL16,

		// compressed formats
		PIXEL_FORMAT_COMPRESSED_R,
		PIXEL_FORMAT_COMPRESSED_RG,
		PIXEL_FORMAT_COMPRESSED_RGB,
		PIXEL_FORMAT_COMPRESSED_RGBA,
		PIXEL_FORMAT_COMPRESSED_SRGB,
		PIXEL_FORMAT_COMPRESSED_SRGB_A,
		PIXEL_FORMAT_COMPRESSED_R_RGTC1,
		PIXEL_FORMAT_COMPRESSED_SIGNED_R_RGTC1,
		PIXEL_FORMAT_COMPRESSED_RG_RGTC2,
		PIXEL_FORMAT_COMPRESSED_SIGNED_RG_RGTC2,
		PIXEL_FORMAT_COMPRESSED_RGB_DXT1,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT1,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT3,
		PIXEL_FORMAT_COMPRESSED_RGBA_DXT5,
		PIXEL_FORMAT_COMPRESSED_SRGB_DXT1,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT1,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT3,
		PIXEL_FORMAT_COMPRESSED_SRGB_A_DXT5,
		PIXEL_FORMAT_COMPRESSED_RGBA_BPTC_UNORM,
		PIXEL_FORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
		PIXEL_FORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
		PIXEL_FORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,
		PIXEL_FORMAT_COMPRESSED_RGB8_ETC2,
		PIXEL_FORMAT_COMPRESSED_SRGB8_ETC2,
		PIXEL_FORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
		PIXEL_FORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
		PIXEL_FORMAT_COMPRESSED_RGBA8_ETC2_EAC,
		PIXEL_FORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
		PIXEL_FORMAT_COMPRESSED_R11_EAC,
		PIXEL_FORMAT_COMPRESSED_SIGNED_R11_EAC,
		PIXEL_FORMAT_COMPRESSED_RG11_EAC,
		PIXEL_FORMAT_COMPRESSED_SIGNED_RG11_EAC,
	};

	enum CubeFace
	{
		CUBE_FACE_POSITIVE_X,
		CUBE_FACE_NEGATIVE_X,
		CUBE_FACE_POSITIVE_Y,
		CUBE_FACE_NEGATIVE_Y,
		CUBE_FACE_POSITIVE_Z,
		CUBE_FACE_NEGATIVE_Z,
	};

	// Buffer storage flags
	enum
	{
		BUFFER_MAP_READ_BIT = 0x0001,				// Allows reading from buffer when mapped.
		BUFFER_MAP_WRITE_BIT = 0x0002,				// Allows writing to buffer when mapped.
		BUFFER_MAP_PERSISTENT_BIT = 0x0040,			// Allows buffer to be used while mapped. Requires at least one of BUFFER_MAP_READ_BIT or BUFFER_MAP_WRITE_BIT.
		BUFFER_MAP_COHERENT_BIT = 0x0080,			// Allows reads and writes to be coherent without explicit barier. Requires BUFFER_MAP_PERSISTENT_BIT.
		BUFFER_DYNAMIC_STORAGE_BIT = 0x0100,	// Required for BufferSubData.
		BUFFER_CLIENT_STORAGE_BIT = 0x0200,		// Hint that suggests that storage for the buffer should reside in client memory.
	};

	enum BufferAccess
	{
		ACCESS_READ_ONLY,
        ACCESS_WRITE_ONLY,
        ACCESS_READ_WRITE,
	};

	// Buffer map flags
	enum
	{
		MAP_READ_BIT = 0x0001,
		MAP_WRITE_BIT = 0x0002,
		MAP_INVALIDATE_RANGE_BIT = 0x0004,	// cannot be used with MAP_READ_BIT
		MAP_INVALIDATE_BUFFER_BIT = 0x0008,	// cannot be used with MAP_READ_BIT
		MAP_FLUSH_EXPLICIT_BIT = 0x0010,	// MAP_WRITE_BIT must be set
		MAP_UNSYNCHRONIZED_BIT = 0x0020,	// cannot be used with MAP_READ_BIT
	};

	enum ColorBuffer
	{
		COLOR_BUFFER_NONE,

		COLOR_BUFFER_FRONT_LEFT,
		COLOR_BUFFER_FRONT_RIGHT,
		COLOR_BUFFER_BACK_LEFT,
		COLOR_BUFFER_BACK_RIGHT,

		COLOR_BUFFER_COLOR0,
		COLOR_BUFFER_COLOR1,
		COLOR_BUFFER_COLOR2,
		COLOR_BUFFER_COLOR3,
		COLOR_BUFFER_COLOR4,
		COLOR_BUFFER_COLOR5,
		COLOR_BUFFER_COLOR6,
		COLOR_BUFFER_COLOR7,
		COLOR_BUFFER_COLOR8,
		COLOR_BUFFER_COLOR9,
		COLOR_BUFFER_COLOR10,
		COLOR_BUFFER_COLOR11,
		COLOR_BUFFER_COLOR12,
		COLOR_BUFFER_COLOR13,
		COLOR_BUFFER_COLOR14,
		COLOR_BUFFER_COLOR15,
	};

	enum AttachmentBuffer
	{
		ATTACH_BUFFER_COLOR0,
		ATTACH_BUFFER_COLOR1,
		ATTACH_BUFFER_COLOR2,
		ATTACH_BUFFER_COLOR3,
		ATTACH_BUFFER_COLOR4,
		ATTACH_BUFFER_COLOR5,
		ATTACH_BUFFER_COLOR6,
		ATTACH_BUFFER_COLOR7,
		ATTACH_BUFFER_COLOR8,
		ATTACH_BUFFER_COLOR9,
		ATTACH_BUFFER_COLOR10,
		ATTACH_BUFFER_COLOR11,
		ATTACH_BUFFER_COLOR12,
		ATTACH_BUFFER_COLOR13,
		ATTACH_BUFFER_COLOR14,
		ATTACH_BUFFER_COLOR15,
		ATTACH_BUFFER_DEPTH,
		ATTACH_BUFFER_STENCIL,
		ATTACH_BUFFER_DEPTH_STENCIL,
	};

	// Renderbuffer type flags, used in BlitFramebuffer
	enum
	{
		COLOR_BUFFER_BIT = 0x0001,
		DEPTH_BUFFER_BIT = 0x0002,
		STENCIL_BUFFER_BIT = 0x0004
	};

	enum PolygonFace
	{
		FACE_FRONT,
		FACE_BACK,
		FACE_FRONT_AND_BACK,
	};

	enum PrimitiveType
	{
		PRIM_POINTS,
		PRIM_LINES,
		PRIM_LINES_ADJACENCY,
		PRIM_LINE_STRIP,
		PRIM_LINE_STRIP_ADJACENCY,
		PRIM_LINE_LOOP,
		PRIM_TRIANGLES,
		PRIM_TRIANGLES_ADJACENCY,
		PRIM_TRIANGLE_STRIP,
		PRIM_TRIANGLE_STRIP_ADJACENCY,
		PRIM_TRIANGLE_FAN,
		PRIM_PATCHES,
	};

	enum TessGenPrimitiveType
	{
		TESS_GEN_PRIM_QUADS,
		TESS_GEN_PRIM_TRIANGLES,
		TESS_GEN_PRIM_ISOLINES,
	};

	enum TessGenSpacing
	{
		TESS_GEN_SPACING_EQUAL,
		TESS_GEN_SPACING_FRACTIONAL_EVEN,
		TESS_GEN_SPACING_FRACTIONAL_ODD,
	};

	enum RasterMode
	{
		RASTER_POINT,
		RASTER_LINE,
		RASTER_FILL,
	};

	enum VertexOrder
	{
		ORIENT_CW,
		ORIENT_CCW,
	};

	enum CompareFunc
	{
		FUNC_NEVER,
		FUNC_LESS,
		FUNC_EQUAL,
		FUNC_LEQUAL,
		FUNC_GREATER,
		FUNC_NOTEQUAL,
		FUNC_GEQUAL,
		FUNC_ALWAYS,
	};

	enum StencilOp
	{
		STENCIL_OP_KEEP,
		STENCIL_OP_ZERO,
		STENCIL_OP_REPLACE,
		STENCIL_OP_INCR,
		STENCIL_OP_INCR_WRAP,
		STENCIL_OP_DECR,
		STENCIL_OP_DECR_WRAP,
		STENCIL_OP_INVERT,
	};

	enum BlendOp
	{
		BLEND_OP_ADD,
		BLEND_OP_SUBTRACT,
		BLEND_OP_REVERSE_SUBTRACT,
		BLEND_OP_MIN,
		BLEND_OP_MAX,
	};

	enum BlendFunc
	{
		BLEND_FUNC_ZERO,
		BLEND_FUNC_ONE,
		BLEND_FUNC_SRC_COLOR,
		BLEND_FUNC_ONE_MINUS_SRC_COLOR,
		BLEND_FUNC_DST_COLOR,
		BLEND_FUNC_ONE_MINUS_DST_COLOR,
		BLEND_FUNC_SRC_ALPHA,
		BLEND_FUNC_ONE_MINUS_SRC_ALPHA,
		BLEND_FUNC_DST_ALPHA,
		BLEND_FUNC_ONE_MINUS_DST_ALPHA,
		BLEND_FUNC_CONSTANT_COLOR,
		BLEND_FUNC_ONE_MINUS_CONSTANT_COLOR,
		BLEND_FUNC_CONSTANT_ALPHA,
		BLEND_FUNC_ONE_MINUS_CONSTANT_ALPHA,
		BLEND_FUNC_SRC_ALPHA_SATURATE,
		BLEND_FUNC_SRC1_COLOR,
		BLEND_FUNC_SRC1_ALPHA,
		BLEND_FUNC_ONE_MINUS_SRC1_COLOR,
		BLEND_FUNC_ONE_MINUS_SRC1_ALPHA,
	};

	enum ColorReadClamp
	{
		COLOR_READ_CLAMP_OFF,
		COLOR_READ_CLAMP_ON,
		COLOR_READ_CLAMP_FIXED_ONLY,
	};

	enum LogicOp
	{
		LOGIC_OP_CLEAR,
		LOGIC_OP_AND,
		LOGIC_OP_AND_REVERSE,
		LOGIC_OP_COPY,
		LOGIC_OP_AND_INVERTED,
		LOGIC_OP_NOOP,
		LOGIC_OP_XOR,
		LOGIC_OP_OR,
		LOGIC_OP_NOR,
		LOGIC_OP_EQUIV,
		LOGIC_OP_INVERT,
		LOGIC_OP_OR_REVERSE,
		LOGIC_OP_COPY_INVERTED,
		LOGIC_OP_OR_INVERTED,
		LOGIC_OP_NAND,
		LOGIC_OP_SET,
	};

	enum TexAddressMode
	{
		TEX_ADDRESS_CLAMP_TO_BORDER,
		TEX_ADDRESS_CLAMP_TO_EDGE,
		TEX_ADDRESS_REPEAT,
		TEX_ADDRESS_MIRRORED_REPEAT,
		TEX_ADDRESS_MIRROR_CLAMP_TO_EDGE,
	};

	enum TexFilter
	{
		TEX_FILTER_NEAREST,
		TEX_FILTER_LINEAR,
		TEX_FILTER_NEAREST_MIPMAP_NEAREST,
		TEX_FILTER_NEAREST_MIPMAP_LINEAR,
		TEX_FILTER_LINEAR_MIPMAP_NEAREST,
		TEX_FILTER_LINEAR_MIPMAP_LINEAR,
	};

	enum TexCompareMode
	{
		DEPTH_CMP_NONE,
		DEPTH_CMP_REF_TO_TEXTURE,
	};

	enum TexSwizzleSource
	{
		TEX_SWIZZLE_SRC_RED,
		TEX_SWIZZLE_SRC_GREEN,
		TEX_SWIZZLE_SRC_BLUE,
		TEX_SWIZZLE_SRC_ALPHA,
		TEX_SWIZZLE_SRC_ZERO,
		TEX_SWIZZLE_SRC_ONE,
	};

	enum TexSwizzleDest
	{
		TEX_SWIZZLE_DST_RED,
		TEX_SWIZZLE_DST_GREEN,
		TEX_SWIZZLE_DST_BLUE,
		TEX_SWIZZLE_DST_ALPHA,
	};

	enum FramebufferStatus
	{
		FBUF_STATUS_COMPLETE,
		FBUF_STATUS_INCOMPLETE_ATTACHMENT,
		FBUF_STATUS_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
		FBUF_STATUS_INCOMPLETE_DRAW_BUFFER,
		FBUF_STATUS_INCOMPLETE_READ_BUFFER,
		FBUF_STATUS_FRAMEBUFFER_UNSUPORTED,
		FBUF_STATUS_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
		FBUF_STATUS_FRAMEBUFFER_UNDEFINED,
	};

	enum SwapMethod
	{
		SWAP_EXCHANGE,
		SWAP_COPY,
		SWAP_UNDIFINED,
	};

	enum ColorBufferType
	{
		COLOR_BUFFER_TYPE_RGBA,
		COLOR_BUFFER_TYPE_RGBA_FLOAT,
	};

	enum ProgramParam
	{
		PROG_PARAM_GEOMETRY_VERT_OUT,
		PROG_PARAM_GEOMETRY_INPUT_TYPE,
		PROG_PARAM_GEOMETRY_OUTPUT_TYPE,
	};

	enum ConditionalRenderMode
	{
		COND_RENDER_QUERY_WAIT,
		COND_RENDER_QUERY_NO_WAIT,
		COND_RENDER_QUERY_BY_REGION_WAIT,
		COND_RENDER_QUERY_BY_REGION_NO_WAIT,
		COND_RENDER_QUERY_WAIT_INVERTED,
		COND_RENDER_QUERY_NO_WAIT_INVERTED,
		COND_RENDER_QUERY_BY_REGION_WAIT_INVERTED,
		COND_RENDER_QUERY_BY_REGION_NO_WAIT_INVERTED,
	};

	enum TransformFeedbackBufferMode
	{
		TF_BUFFER_MODE_INTERLEAVED_ATTRIBS,
		TF_BUFFER_MODE_SEPARATE_ATTRIBS,
	};

	enum VertexConvention
	{
		VERT_CONVENTION_FIRST_VERTEX,
		VERT_CONVENTION_LAST_VERTEX,
	};

	enum FenceSyncCondition
	{
		SYNC_GPU_COMMANDS_COMPLETE
	};

	enum SyncWaitStatus
	{
		SYNC_STATUS_ALREADY_SIGNALED,
		SYNC_STATUS_TIMEOUT_EXPIRED,
		SYNC_STATUS_CONDITION_SATISFIED,
		SYNC_STATUS_WAIT_FAILED,
	};

	// Sync wait flags
	enum
	{
		SYNC_FLUSH_COMMANDS_BIT = 0x0001, // used in ClientWaitSync
	};

	// Memory barrier flags
	enum
	{
		BARRIER_VERTEX_ATTRIB_ARRAY_BIT = 0x0001,
		BARRIER_INDEX_ARRAY_BIT = 0x0002,
		BARRIER_UNIFORM_BIT = 0x0004,
		BARRIER_TEXTURE_FETCH_BIT = 0x0008,
		BARRIER_SHADER_IMAGE_ACCESS_BIT = 0x0010,
		BARRIER_COMMAND_BIT = 0x0020,
		BARRIER_PIXEL_BUFFER_BIT = 0x0040,
		BARRIER_TEXTURE_UPDATE_BIT = 0x0080,
		BARRIER_BUFFER_UPDATE_BIT = 0x0100,
		BARRIER_FRAMEBUFFER_BIT = 0x0200,
		BARRIER_TRANSFORM_FEEDBACK_BIT = 0x0400,
		BARRIER_ATOMIC_COUNTER_BIT = 0x0800,
		BARRIER_SHADER_STORAGE_BIT = 0x1000,
		BARRIER_QUERY_BUFFER_BIT = 0x2000,
		BARRIER_ALL_BITS = 0xFFFFFFFF,
	};

	enum FeatureSupport
	{
		FEATURE_SUPPORT_NONE,
		FEATURE_SUPPORT_CAVEAT,
		FEATURE_SUPPORT_FULL,
	};

	enum TextureComponentType
	{
		TEX_COMPONENT_TYPE_NONE,
		TEX_COMPONENT_TYPE_SIGNED_NORMALIZED,
		TEX_COMPONENT_TYPE_UNSIGNED_NORMALIZED,
		TEX_COMPONENT_TYPE_FLOAT,
		TEX_COMPONENT_TYPE_INT,
		TEX_COMPONENT_TYPE_UNSIGNED_INT,
	};

	enum ColorEncoding
	{
		COLOR_ENCODING_NONE,
		COLOR_ENCODING_LINEAR,
		COLOR_ENCODING_SRGB,
	};

	enum ImageClass
	{
		IMAGE_CLASS_NONE,
		IMAGE_CLASS_4_X_32,
		IMAGE_CLASS_2_X_32,
		IMAGE_CLASS_1_X_32,
		IMAGE_CLASS_4_X_16,
		IMAGE_CLASS_2_X_16,
		IMAGE_CLASS_1_X_16,
		IMAGE_CLASS_4_X_8,
		IMAGE_CLASS_2_X_8,
		IMAGE_CLASS_1_X_8,
		IMAGE_CLASS_11_11_10,
		IMAGE_CLASS_10_10_10_2,
	};

	enum ImageFormatCompatibilityType
	{
		IMAGE_FORMAT_COMPATIBILITY_NONE,
		IMAGE_FORMAT_COMPATIBILITY_BY_SIZE,
		IMAGE_FORMAT_COMPATIBILITY_BY_CLASS,
	};

	enum ViewClass
	{
		VIEW_CLASS_NONE,
		VIEW_CLASS_128_BITS,
		VIEW_CLASS_96_BITS,
		VIEW_CLASS_64_BITS,
		VIEW_CLASS_48_BITS,
		VIEW_CLASS_32_BITS,
		VIEW_CLASS_24_BITS,
		VIEW_CLASS_16_BITS,
		VIEW_CLASS_8_BITS,
		VIEW_CLASS_RGTC1_RED,
		VIEW_CLASS_RGTC2_RG,
		VIEW_CLASS_BPTC_UNORM,
		VIEW_CLASS_BPTC_FLOAT,
	};

	enum DepthStencilTexMode
	{
		DS_TEX_MODE_DEPTH_COMPONENT,
		DS_TEX_MODE_STENCIL_INDEX,
	};

	enum ErrorCode
	{
		ERROR_CODE_NONE,
		ERROR_CODE_INVALID_ENUM,
		ERROR_CODE_INVALID_VALUE,
		ERROR_CODE_INVALID_OPERATION,
		ERROR_CODE_INVALID_FRAMEBUFFER_OPERATION,
		ERROR_CODE_OUT_OF_MEMORY,
		ERROR_CODE_STACK_UNDERFLOW,
		ERROR_CODE_STACK_OVERFLOW,
	};

	enum DebugMessageSource
	{
		DEBUG_SOURCE_API,
		DEBUG_SOURCE_WINDOW_SYSTEM,
		DEBUG_SOURCE_SHADER_COMPILER,
		DEBUG_SOURCE_THIRD_PARTY,
		DEBUG_SOURCE_APPLICATION,
		DEBUG_SOURCE_OTHER,
		DEBUG_SOURCE_ALL,
	};

	enum DebugMessageType
	{
		DEBUG_TYPE_ERROR,
		DEBUG_TYPE_DEPRECATED_BEHAVIOR,
		DEBUG_TYPE_UNDEFINED_BEHAVIOR,
		DEBUG_TYPE_PORTABILITY,
		DEBUG_TYPE_PERFORMANCE,
		DEBUG_TYPE_OTHER,
		DEBUG_TYPE_MARKER,
		DEBUG_TYPE_ALL,
	};

	enum DebugMessageSeverity
	{
		DEBUG_SEVERITY_HIGH,
		DEBUG_SEVERITY_MEDIUM,
		DEBUG_SEVERITY_LOW,
		DEBUG_SEVERITY_NOTIFICATION,
		DEBUG_SEVERITY_ALL,
	};

	enum ClipOrigin
	{
		CLIP_ORIGIN_LOWER_LEFT,
		CLIP_ORIGIN_UPPER_LEFT,
	};

	enum ClipDepth
	{
		CLIP_DEPTH_NEGATIVE_ONE_TO_ONE,
		CLIP_DEPTH_ZERO_TO_ONE,
	};


	typedef void* SyncObject;

	typedef unsigned long ulong;
	typedef unsigned int uint;
	typedef unsigned short ushort;
	typedef unsigned char ubyte;
	typedef uint64_t uint64;
	typedef int64_t int64;

	struct PixelStore
	{
		PixelStore()
		{
			swapBytes = false;
			lsbFirst = false;
			rowLength = 0;
			skipRows = 0;
			skipPixels = 0;
			alignment = 4;
			imageHeight = 0;
			skipImages = 0;
			compressedBlockWidth = 0;
			compressedBlockHeight = 0;
			compressedBlockDepth = 0;
			compressedBlockSize = 0;
		}

		bool swapBytes;
		bool lsbFirst;
		int rowLength;	// Number of pixels in a row.
		int skipRows;
		int skipPixels;
		int alignment;
		int imageHeight;
		int skipImages;
		int compressedBlockWidth;
		int compressedBlockHeight;
		int compressedBlockDepth;
		int compressedBlockSize;
	};

	struct FramebufferFormat
	{
		ColorBufferType colorBufferType;
		bool sRGB;
		bool doubleBuffer;
		int colorBits;
		int depthBits;
		int stencilBits;
		int multisampleSamples;
		SwapMethod swapMethod;
	};

	class IDebugLogger
	{
	public:
		virtual ~IDebugLogger() {}
		virtual void DebugMessage(DebugMessageSource source, DebugMessageType type, uint id, DebugMessageSeverity severity, const char* message) = 0;
	};

}



#endif // _GLSLAYER_COMMON_H_
